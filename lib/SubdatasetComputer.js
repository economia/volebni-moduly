// Generated by LiveScript 1.2.0
(function(){
  var SubdatasetComputer;
  module.exports = SubdatasetComputer = (function(){
    SubdatasetComputer.displayName = 'SubdatasetComputer';
    var prototype = SubdatasetComputer.prototype, constructor = SubdatasetComputer;
    function SubdatasetComputer(){}
    prototype.setBaseDataset = function(dataset){
      this.dataset = dataset;
    };
    prototype.getParties = function(){
      var partyIds_processed, output;
      partyIds_processed = [];
      output = [];
      this.forEachParty(function(party){
        var id, name, abbr, votes_sum, votes_sum_percent;
        if (in$(party.id, partyIds_processed)) {
          return;
        }
        id = party.id, name = party.name, abbr = party.abbr, votes_sum = party.votes_sum, votes_sum_percent = party.votes_sum_percent;
        votes_sum_percent = parseFloat(votes_sum_percent.toFixed(4));
        output.push({
          id: id,
          name: name,
          abbr: abbr,
          votes_sum: votes_sum,
          votes_sum_percent: votes_sum_percent
        });
        return partyIds_processed.push(id);
      });
      return output;
    };
    prototype.getCandidates = function(){
      var output;
      output = this.loadCandidates();
      this.sortCandidates(output);
      return output;
    };
    prototype.loadCandidates = function(){
      var output;
      output = [];
      this.dataset.forEach(function(county){
        var parties, countyLowestScore, countyLowestCandidate, countyClosestParty, x$;
        parties = county.parties;
        countyLowestScore = +Infinity;
        countyLowestCandidate = null;
        countyClosestParty = null;
        parties.forEach(function(party){
          var candidates, lastCandidateIndex;
          candidates = party.candidates;
          if (party.requiredVotes) {
            countyClosestParty = party;
          }
          lastCandidateIndex = null;
          candidates.forEach(function(candidate){
            var name, surname, partyId, countyId, rank, votedRank, mandate, newLength;
            name = candidate.name, surname = candidate.surname, partyId = candidate.partyId, countyId = candidate.countyId, rank = candidate.rank, votedRank = candidate.votedRank, mandate = candidate.mandate;
            if (!mandate) {
              return;
            }
            newLength = output.push({
              name: name,
              surname: surname,
              partyId: partyId,
              countyId: countyId,
              rank: rank,
              votedRank: votedRank
            });
            return lastCandidateIndex = newLength - 1;
          });
          if (party.lowestScore < countyLowestScore) {
            countyLowestScore = party.lowestScore;
            return countyLowestCandidate = output[lastCandidateIndex];
          }
        });
        if (!(countyLowestCandidate && countyClosestParty)) {
          return;
        }
        if (countyLowestCandidate.partyId !== countyClosestParty.id) {
          x$ = countyLowestCandidate;
          x$.leadByVotes = Math.round(countyClosestParty.requiredVotes);
          x$.leadByScore = Math.round(countyClosestParty.requiredScore);
          x$.score = Math.round(countyLowestScore);
          x$.leadFromParty = countyClosestParty.id;
          return x$;
        }
      });
      return output;
    };
    prototype.sortCandidates = function(candidates){
      return candidates.sort(function(a, b){
        var that;
        switch (false) {
        case !(that = a.partyId - b.partyId):
          return that;
        case !(that = a.votedRank - b.votedRank):
          return that;
        default:
          return a.rank - b.rank;
        }
      });
    };
    prototype.forEachParty = function(fn){
      return this.dataset.forEach(function(county){
        var parties;
        parties = county.parties;
        return parties.forEach(fn);
      });
    };
    return SubdatasetComputer;
  }());
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
