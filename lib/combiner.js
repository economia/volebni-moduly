// Generated by LiveScript 1.2.0
(function(){
  var mandaty, prefhlasy, dhondt, computePartyTotals, decorateParty;
  mandaty = require('../src/mandaty-po-kraji');
  prefhlasy = require('../src/preferencni-hlasy');
  dhondt = require('../src/dhondt');
  module.exports.combine = function(counties, parties, candidates){
    var counties_assoc, parties_assoc, county_party_candidates_assoc;
    counties_assoc = {};
    parties_assoc = {};
    counties.forEach(function(it){
      return counties_assoc[it.id] = it;
    });
    parties.forEach(function(it){
      return parties_assoc[it.id] = it;
    });
    county_party_candidates_assoc = {};
    computePartyTotals(counties, parties_assoc);
    counties.forEach(function(county){
      var decorator;
      decorator = function(it){
        return decorateParty(it, parties_assoc);
      };
      county.parties.forEach(decorator);
      return county.parties.forEach(function(party){
        return county_party_candidates_assoc[county.id + "-" + party.id] = party.candidates = [];
      });
    });
    candidates.forEach(function(candidate){
      return county_party_candidates_assoc[candidate.countyId + "-" + candidate.partyId].push(candidate);
    });
    return counties;
  };
  module.exports.compute = function(counties, mandates, quorum){
    mandates == null && (mandates = 200);
    quorum == null && (quorum = 0.05);
    mandaty.compute(counties, mandates, {
      countAccessor: function(it){
        return it.votes;
      },
      resultProperty: 'mandates'
    });
    return counties.forEach(function(county){
      var partiesAboveQuorum;
      county.parties.forEach(function(it){
        return it.mandates = 0;
      });
      partiesAboveQuorum = county.parties.filter(function(it){
        return it.votes_percent >= quorum;
      });
      dhondt.compute(partiesAboveQuorum, county.mandates, {
        voteAccessor: function(it){
          return it.votes;
        },
        resultProperty: 'mandates'
      });
      return county.parties.forEach(function(party){
        var remainingMandates;
        prefhlasy.compute(party.candidates, party.votes, {
          voteAccessor: function(it){
            return it.votes;
          },
          threshold: quorum,
          resultProperty: 'votedRank'
        });
        party.candidates.sort(function(a, b){
          var that;
          switch (false) {
          case !(that = a.votedRank - b.votedRank):
            return that;
          default:
            return a.rank - b.rank;
          }
        });
        remainingMandates = party.mandates;
        return party.candidates.forEach(function(it){
          it.mandate = remainingMandates > 0;
          return --remainingMandates;
        });
      });
    });
  };
  computePartyTotals = function(counties, parties_assoc){
    var totalVotes, id, party, results$ = [];
    totalVotes = 0;
    counties.forEach(function(county){
      return county.parties.forEach(function(party){
        var globalParty;
        if (!party.votes) {
          return;
        }
        globalParty = parties_assoc[party.id];
        globalParty.votes_sum = (globalParty.votes_sum || 0) + party.votes;
        return totalVotes += party.votes;
      });
    });
    for (id in parties_assoc) {
      party = parties_assoc[id];
      results$.push(party.votes_percent = party.votes_sum / totalVotes);
    }
    return results$;
  };
  decorateParty = function(party, parties_assoc){
    var property, ref$, value, results$ = [];
    for (property in ref$ = parties_assoc[party.id]) {
      value = ref$[property];
      results$.push(party[property] = value);
    }
    return results$;
  };
}).call(this);
