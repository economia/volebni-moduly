// Generated by LiveScript 1.2.0
(function(){
  module.exports.compute = function(partyArray, mandateCount, options){
    var mandates, votes, that, dividers, res$, i$, ridx$, scores, mandatesAwarded, len$, scoreIndex, ref$, score, index, divider, lastScore, scoreDiff;
    options == null && (options = {});
    options.base == null && (options.base = 1);
    mandates = partyArray.map(function(){
      return 0;
    });
    votes = (function(){
      switch (false) {
      case !(that = options.voteAccessor):
        return partyArray.map(that);
      default:
        return partyArray;
      }
    }());
    if (that = options.resultProperty) {
      partyArray.forEach(function(it){
        return it[that] = 0;
      });
    }
    res$ = [];
    for (i$ = 1; i$ <= mandateCount; ++i$) {
      ridx$ = i$;
      res$.push(ridx$);
    }
    dividers = res$;
    if (that = options.base) {
      dividers[0] = that;
    }
    scores = [];
    dividers.forEach(function(divider){
      return votes.forEach(function(voteCount, index){
        var score;
        score = voteCount / divider;
        return scores.push({
          score: score,
          index: index,
          divider: divider
        });
      });
    });
    scores.sort(function(a, b){
      var that;
      switch (false) {
      case !(that = b.score - a.score):
        return that;
      case !(that = a.index - b.index):
        return that;
      default:
        return 0;
      }
    });
    mandatesAwarded = 0;
    for (i$ = 0, len$ = scores.length; i$ < len$; ++i$) {
      scoreIndex = i$;
      ref$ = scores[i$], score = ref$.score, index = ref$.index, divider = ref$.divider;
      if (mandatesAwarded < mandateCount) {
        mandates[index]++;
        if (that = options.resultProperty) {
          partyArray[index][that]++;
        }
        if (that = options.lowestScoreProperty) {
          partyArray[index][that] = score;
        }
      } else if (mandatesAwarded === mandateCount) {
        lastScore = scores[scoreIndex - 1];
        if (!lastScore) {
          break;
        }
        if (lastScore.index === index) {
          break;
        }
        scoreDiff = lastScore.score - score;
        if (that = options.requiredVotesProperty) {
          partyArray[index][that] = scoreDiff * divider;
        }
        if (that = options.requiredScoreProperty) {
          partyArray[index][that] = scoreDiff;
        }
      } else {
        break;
      }
      mandatesAwarded++;
    }
    return mandates;
  };
}).call(this);
