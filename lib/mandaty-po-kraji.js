// Generated by LiveScript 1.2.0
(function(){
  var sum;
  module.exports.compute = function(kraje, mandateCount, options){
    var values, that, total, mandateNumber, mandatesRaw, mandatesReceived, mandateRemainders, currentMandateCount, maxRemainder, maxIndex, i$, len$, index, mandateRemainder;
    values = (function(){
      switch (false) {
      case !(that = options.countAccessor):
        return kraje.map(function(it){
          return that(it);
        });
      default:
        return kraje;
      }
    }());
    total = values.reduce(sum);
    mandateNumber = Math.round(total / mandateCount);
    mandatesRaw = values.map(function(it){
      return it / mandateNumber;
    });
    mandatesReceived = mandatesRaw.map(function(it){
      return Math.floor(it);
    });
    mandateRemainders = mandatesRaw.map(function(it){
      return it % 1;
    });
    currentMandateCount = mandatesReceived.reduce(sum);
    while (currentMandateCount < mandateCount) {
      maxRemainder = -Infinity;
      maxIndex = null;
      for (i$ = 0, len$ = mandateRemainders.length; i$ < len$; ++i$) {
        index = i$;
        mandateRemainder = mandateRemainders[i$];
        if (mandateRemainder > maxRemainder) {
          maxRemainder = mandateRemainder;
          maxIndex = index;
        }
      }
      mandateRemainders[maxIndex] = 0;
      mandatesReceived[maxIndex] += 1;
      currentMandateCount += 1;
    }
    if (that = options.resultProperty) {
      kraje.forEach(function(kraj, index){
        return kraj[that] = mandatesReceived[index];
      });
      return kraje;
    } else {
      return mandatesReceived;
    }
  };
  sum = function(sum, curr){
    return (sum || 0) + curr;
  };
}).call(this);
